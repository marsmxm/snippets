/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ink.mxm.redisson;

import org.redisson.Redisson;
import org.redisson.api.RAtomicLongReactive;
import org.redisson.api.RLock;
import org.redisson.api.RLockReactive;
import org.redisson.api.RedissonClient;
import org.redisson.api.RedissonReactiveClient;
import org.redisson.config.Config;
import org.redisson.config.TransportMode;

import io.netty.channel.epoll.Epoll;
import reactor.core.publisher.Mono;

public class App {

    public static void main(String[] args) {
        Config config = new Config();

        try {
            Epoll.ensureAvailability();
            config.setTransportMode(TransportMode.EPOLL);
        } catch (Throwable t) {
            t.printStackTrace();
            System.err.println("Using NIO");
        }

        config.useClusterServers()
              // use "rediss://" for SSL connection
              .addNodeAddress("redis://10.127.208.18:7000",
                              "redis://10.127.208.19:7000",
                              "redis://10.127.113.41:7000");

        RedissonReactiveClient client = Redisson.createReactive(config);
        RAtomicLongReactive longObject = client.getAtomicLong("myLong");
        Mono<Boolean> result = longObject.compareAndSet(3, 401);

        RLockReactive lock = client.getLock("anyLock");
    }
}
