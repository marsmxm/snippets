import java.util.HashSet;
import java.util.Set;

import org.apache.commons.pool2.impl.GenericObjectPoolConfig;

import redis.clients.jedis.HostAndPort;
import redis.clients.jedis.JedisCluster;
import redis.clients.jedis.JedisPubSub;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {


    private static JedisCluster getJedisCluster() {

        return new JedisCluster(new HostAndPort("localhost", 30001),
                                1000,
                                0,
                                3,
                                getPoolConfig());
    }

    private static GenericObjectPoolConfig getPoolConfig() {
        GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();
        poolConfig.setMaxTotal(10);
        poolConfig.setMaxIdle(10);
        poolConfig.setMinIdle(5);
        poolConfig.setMaxWaitMillis(1000);
        poolConfig.setLifo(true);
        poolConfig.setBlockWhenExhausted(false);
        poolConfig.setTestOnBorrow(false);
        poolConfig.setTestOnReturn(false);
        poolConfig.setTestWhileIdle(false);
        poolConfig.setSoftMinEvictableIdleTimeMillis(30000);
        poolConfig.setTimeBetweenEvictionRunsMillis(30000);
        return poolConfig;
    }

    public static void main(String[] args) {
        JedisCluster jedisCluster = getJedisCluster();
        jedisCluster.set("mxm", "abc");
        System.out.println(jedisCluster.get("mxm"));

        jedisCluster.subscribe(new MyListener(), "test-ch");
    }

    static class MyListener extends JedisPubSub {
        public void onMessage(String channel, String message) {
            System.out.println(channel);
            System.out.println(message);
        }

        public void onSubscribe(String channel, int subscribedChannels) {
            System.out.println("subscribed on " + channel);
        }

        public void onUnsubscribe(String channel, int subscribedChannels) {
        }

        public void onPSubscribe(String pattern, int subscribedChannels) {
        }

        public void onPUnsubscribe(String pattern, int subscribedChannels) {
        }

        public void onPMessage(String pattern, String channel, String message) {
        }
    }
}
