package host.mxm.sse;

import java.io.IOException;
import java.util.concurrent.atomic.AtomicLong;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter.SseEventBuilder;

import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.AllArgsConstructor;
import lombok.Data;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
@SpringBootApplication
@Controller
public class App {
    private static final AtomicLong counter = new AtomicLong(0);

    @GetMapping(path="/events", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
    public SseEmitter handle() {
        ObjectMapper mapper = new ObjectMapper();
        SseEmitter sseEmitter = new SseEmitter();
        new Thread(() -> {
            for (int i = 0; i < 5; i++) {
                try {
                    sseEmitter.send(SseEmitter.event()
                                      .id(String.valueOf(counter.incrementAndGet()))
                                      .name("e1")
                                      .data(mapper.writeValueAsString(new Event(Status.DEPLOYING))));
                    Thread.sleep(500);
                } catch (IOException | InterruptedException e) {
                    e.printStackTrace();
                }

            }
            try {
                sseEmitter.send(SseEmitter.event()
                                          .id(String.valueOf(counter.incrementAndGet()))
                                          .name("e1")
                                          .data(mapper.writeValueAsString(new Event(Status.COMPLETE))));
            } catch (IOException e) {
                e.printStackTrace();
            }
            sseEmitter.complete();
        }).start();
        return sseEmitter;
    }

    public static void main(String[] args) {
        SpringApplication.run(App.class, args);
    }

    @Data
    @AllArgsConstructor
    private static class Event {
        Status status;
    }

    private enum Status {
        DEPLOYING, COMPLETE
    }
}
