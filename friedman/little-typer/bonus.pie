#lang pie

(claim identity
  (Π ((T U))
    (-> T T)))
(define identity
  (λ (T)
    (λ (t)
      t)))


(claim cons=
  (Π ((E U)
      (l1 (List E))
      (l2 (List E))
      (e E))
    (-> (= (List E) l1 l2)
      (= (List E) (:: e l1) (:: e l2)))))
(define cons=
  (λ (E l1 l2 e l1=l2)
    (cong l1=l2
      (the (-> (List E)
             (List E))
        (λ (l) (:: e l))))))


(claim cons==
  (Π ((E U)
      (l1 (List E))
      (l2 (List E))
      (e1 E)
      (e2 E))
    (-> (= (List E) l1 l2)
        (= E e1 e2)
      (= (List E) (:: e1 l1) (:: e2 l2)))))
(define cons==
  (λ (E l1 l2 e1 e2 l1=l2 e1=e2)
    (replace
      e1=e2
      (λ (k)
        (= (List E) (:: e1 l1) (:: k l2)))
      (cons= E l1 l2 e1 l1=l2))))


(claim +
  (-> Nat Nat
    Nat))
(define +
  (λ (m n)
    (iter-Nat m
      n
      (λ (+-m-1)
        (add1 +-m-1)))))

(claim n+0=n
  (Π ((n Nat))
    (= Nat (+ n 0) n)))
(define n+0=n
  (λ (n)
    (ind-Nat n
      (λ (k) (= Nat (+ k 0) k))
      (same 0)
      (λ (n-1 n-1+0=n-1) ; (= Nat (+ n-1 0) n-1)
        (cong n-1+0=n-1 (+ 1))))))

(claim +1=add1
  (Π ((n Nat))
    (= Nat (+ n 1) (add1 n))))
(define +1=add1
  (λ (n)
    (ind-Nat n
      (λ (k)
        (= Nat (+ k 1) (add1 k)))
      (same 1)
      (λ (n-1 +1=add1-n-1)
        (cong +1=add1-n-1 (+ 1))))))

(claim vec-append
  (Π ((E U)
      (l Nat)
      (j Nat))
    (-> (Vec E l) (Vec E j)
      (Vec E (+ l j)))))
(define vec-append
  (λ (E l j)
    (λ (start end)
      (ind-Vec l start
        (λ (k xs)
          (Vec E (+ k j)))
        end
        (λ (l-1 e es)
          (λ (vec-append-es)
            (vec:: e vec-append-es)))))))

(claim vec-reverse
  (Π ((E U)
      (l Nat))
    (-> (Vec E l)
      (Vec E l))))
(define vec-reverse
  (λ (E l es)
    (ind-Vec l es
      (λ (k xs)
        (Vec E k))
      vecnil
      (λ (l-1 y ys)
        (λ (vec-reverse-ys)
          (replace (+1=add1 l-1)
            (λ (k)
              (Vec E k))
            (vec-append E l-1 1
              vec-reverse-ys
              (vec:: y vecnil))))))))

(claim test-vec-reverse
  (= (Vec Atom 2)
    (vec-reverse Atom 2 (vec:: 'a (vec:: 'b vecnil)))
    (vec:: 'b (vec:: 'a vecnil))))
(define test-vec-reverse
  (same (vec:: 'b (vec:: 'a vecnil))))

(claim treats
  (Vec Atom 3))
(define treats
  (vec:: 'kanelbullar
    (vec:: 'plattar
      (vec:: 'prinsesstarta vecnil))))

(vec-reverse Atom 3 treats)


(claim my-trans
  (Π ((E U)
      (e1 E)
      (e2 E)
      (e3 E))
    (-> (= E e1 e2)
      (-> (= E e2 e3)
        (= E e1 e3)))))
(define my-trans
  (λ (E e1 e2 e3)
    (λ (e1=e2 e2=e3)
      (replace e2=e3
        (λ (eq)
          (= E e1 eq))
        e1=e2))))

(claim sub1
  (-> Nat
    Nat))
(define sub1
  (λ (n)
    (which-Nat n
      zero
      (λ (n-1)
        n-1))))

(claim add1-sub1=
  (Π ((n Nat))
    (= Nat n (sub1 (add1 n)))))
(define add1-sub1=
  (λ (n)
    (same n)))

(claim add1-injective
  (Π ((n Nat)
      (m Nat))
    (-> (= Nat (add1 n) (add1 m))
      (= Nat n m))))
(define add1-injective
  (λ (n m n+1=m+1)
    (replace n+1=m+1
      (λ (x)
        (= Nat n (sub1 x)))
      (add1-sub1= n))))

(claim add1=
  (Π ((n Nat)
      (m Nat))
    (-> (= Nat n m)
      (= Nat (add1 n) (add1 m)))))
(define add1=
  (λ (n m n=m)
    (cong n=m (+ 1))))

(claim vec-length
  (Π ((E U)
      (n Nat))
    (-> (Vec E n)
      Nat)))
(define vec-length
  (λ (E n es)
    n))

(vec-length Atom 3 treats)


(claim repeat
  (Π ((E U)
      (n Nat))
    (-> E
      (Vec E n))))
(define repeat
  (λ (E n)
    (λ (e)
      (ind-Nat n
        (λ (k)
          (Vec E k))
        vecnil
        (λ (n-1 repeat-n-1)
          (vec:: e repeat-n-1))))))

(claim lift-right-add1
  (Π ((n Nat)
      (m Nat))
    (= Nat (add1 (+ n m)) (+ n (add1 m)))))
(define lift-right-add1
  (λ (n m)
    (ind-Nat n
      (λ (k) (= Nat (add1 (+ k m)) (+ k (add1 m))))
      (same (add1 m))
      (λ (n-1 lra-n-1) ; (= Nat (add1 (+ n-1 m)) (+ n-1 (add1 m)))
        (cong lra-n-1 (+ 1))))))

(claim +-commutative
  (Π ((n Nat)
      (m Nat))
    (= Nat (+ n m) (+ m n))))
(define +-commutative
  (λ (n m)
    (ind-Nat n
      (λ (k) (= Nat (+ k m) (+ m k)))
      (symm (n+0=n m))
      (λ (n-1 comm-n-1) ; (= Nat (+ n-1 m) (+ m n-1))
        (replace (lift-right-add1 m n-1)
          (λ (k)
            (= Nat (add1 (+ n-1 m)) k))
          (cong comm-n-1 (+ 1)))))))

(claim Even
  (-> Nat U))
(define Even
  (λ (n)
    (Σ ((half Nat))
      (= Nat n (+ half half)))))

(claim zero-is-even
  (Even 0))
(define zero-is-even
  (cons 0 (same 0)))

(claim ten-is-even
  (Even 10))
(define ten-is-even
  (cons 5 (same 10)))

(claim +two-even
  (Π ((n Nat))
    (-> (Even n)
      (Even (+ 2 n)))))
(define +two-even
  (λ (n)
    (λ (even-n) ; (Σ ((half Nat)) (= Nat n (+ half half)))
      (cons (add1 (car even-n))
        (replace (lift-right-add1 (add1 (car even-n)) (car even-n))  ;(= Nat
                                                                     ;  (add1 (+ (add1 (car even-n)) (car even-n)))
                                                                     ;  (+ (add1 (car even-n)) (add1 (car even-n))))
          (λ (k)
            (= Nat (+ 2 n) k))
          (cong (cdr even-n) (+ 2)))))))

