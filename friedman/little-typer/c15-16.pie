#lang pie

(claim +
  (-> Nat Nat
    Nat))
(define +
  (λ (m n)
    (iter-Nat m
      n
      (λ (+-m-1)
        (add1 +-m-1)))))

(claim =consequence
  (-> Nat Nat
    U))
(define =consequence
  (λ (n m)
    (which-Nat n
      (which-Nat m
        Trivial
        (λ (m-1)
          Absurd))
      (λ (n-1)
        (which-Nat m
          Absurd
          (λ (m-1)
            (= Nat n-1 m-1)))))))

(claim =consequence-same
  (Π ((n Nat))
    (=consequence n n)))
(define =consequence-same
  (λ (n)
    (ind-Nat n
      (λ (k)
        (=consequence k k))
      sole
      (λ (n-1 =consequence-n-1)
        (same n-1)))))

(claim use-Nat=
  (Π ((n Nat)
      (m Nat))
    (-> (= Nat n m)
      (=consequence n m))))
(define use-Nat=
  (λ (n m)
    (λ (n=m)
      (replace n=m ; (= Nat n m)
        (λ (k)
          (=consequence n k))
        (=consequence-same n)))))

(claim zero-not-add1
  (Π ((n Nat))
    (-> (= Nat 0 (add1 n))
      Absurd)))
(define zero-not-add1
  (λ (n)
    (use-Nat= zero (add1 n))))

(claim add1-not-zero
  (Π ((n Nat))
    (-> (= Nat (add1 n) 0)
      Absurd)))
(define add1-not-zero
  (λ (n)
    (λ (add1=zero)
      (zero-not-add1 n (symm add1=zero)))))

(claim donut-absurdity
  (-> (= Nat 0 6)
    (= Atom 'powdered 'glazed)))
(define donut-absurdity
  (λ (zero=six)
    (ind-Absurd (zero-not-add1 5 zero=six)
      (= Atom 'powdered 'glazed))))


(claim sub1=
  (Π ((n Nat)
      (j Nat))
    (-> (= Nat (add1 n) (add1 j))
      (= Nat n j))))
(define sub1=
  (λ (n j)
    (use-Nat= (add1 n) (add1 j))))

(claim one-not-six
  (-> (= Nat 1 6)
    Absurd))
(define one-not-six
  (λ (1=6)
    (zero-not-add1 4 (sub1= 0 5 1=6))))

(claim add1-not-n
  (Π ((n Nat))
    (-> (= Nat (add1 n) n)
      Absurd)))
(define add1-not-n
  (λ (n)
    (ind-Nat n
      (λ (k)
        (-> (= Nat (add1 k) k)
          Absurd))
      (add1-not-zero 0)
      (λ (n-1 add1-not-n-1)
        (λ (add2=add1) ; (= Nat (add1 (add1 n-1)) (add1 n-1))
          (add1-not-n-1 (sub1= (add1 n-1) n-1 add2=add1)))))))

(claim front
  (Π ((E U)
      (n Nat))
    (-> (Vec E (add1 n))
      E)))
;(define front
;  (λ (E n es)
;    (ind-Vec (add1 n) es
;      (λ (k xs) E)
;      TODO
;      (λ (k h t front-t)
;        h))))
(claim mot-front
  (Π ((E U)
      (k Nat))
    (-> (Vec E k)
      U)))
(define mot-front
  (λ (E k es)
    (Π ((j Nat))
      (-> (= Nat k (add1 j))
        E))))

(claim base-front
  (Π ((E U)
      (j Nat))
    (-> (= Nat 0 (add1 j))
      E)))
(define base-front
  (λ (E j 0=j+1)
    (ind-Absurd (zero-not-add1 j 0=j+1)
      E)))

(claim step-front
  (Π ((E U)
      (l Nat)
      (e E)
      (es (Vec E l)))
    (-> (mot-front E l es)
      (mot-front E (add1 l) (vec:: e es)))))
(define step-front
  (λ (E l e es)
    (λ (front-es)
      (λ (j eq)
        e))))

(define front
  (λ (E n es)
    ((ind-Vec (add1 n) es
       (mot-front E)
       (base-front E)
       (step-front E))
      n
      (same (add1 n)))))


(claim rest
  (Π ((E U)
      (n Nat))
    (-> (Vec E (add1 n))
      (Vec E n))))

(claim mot-rest
  (Π ((E U)
      (k Nat))
    (-> (Vec E k)
      U)))
(define mot-rest
  (λ (E k es)
    (Π ((j Nat))
      (-> (= Nat k (add1 j))
        (Vec E j)))))

(claim base-rest
  (Π ((E U)
      (j Nat))
    (-> (= Nat 0 (add1 j))
      (Vec E j))))
(define base-rest
  (λ (E j 0=j+1)
    (ind-Absurd (zero-not-add1 j 0=j+1)
      (Vec E j))))

(claim step-rest
  (Π ((E U)
      (l Nat)
      (e E)
      (es (Vec E l)))
    (-> (mot-rest E l es)
      (mot-rest E (add1 l) (vec:: e es)))))
(define step-rest
  (λ (E l e es)
    (λ (rest-es)
      (λ (j l+1=j+1) ; (= Nat (add1 l) (add1 j))
        (replace (sub1= l j l+1=j+1) ; (= Nat l j)
          (λ (k)
            (Vec E k))
          es)))))

(define rest
  (λ (E n es)
    ((ind-Vec (add1 n) es
       (mot-rest E)
       (base-rest E)
       (step-rest E))
      n
      (same (add1 n)))))


(claim pem
  (Π ((X U))
    (Either
     X
     (-> X
       Absurd))))
;(define pem
;  (λ (X)
;    (right
;      (λ (x)
;        TODO))))


(claim pem-not-false
  (Π ((X U))
    (-> (-> (Either
              X
              (-> X
                Absurd))
          Absurd)
      Absurd)))
(define pem-not-false
  (λ (X)
    (λ (pem-false)
      (pem-false
        (right
          (λ (x)
            (pem-false
              (left x))))))))


(claim Dec
  (-> U
    U))
(define Dec
  (λ (X)
    (Either X
      (-> X
        Absurd))))

(claim identity
  (Π ((T U))
    (-> T T)))
(define identity
  (λ (T)
    (λ (t)
      t)))


(claim zero?
  (Π ((n Nat))
    (Dec
     (= Nat zero n))))
(define zero?
  (λ (n)
    (ind-Nat n
      (λ (k)
        (Dec (= Nat zero k)))
      (left (same zero))
      (λ (n-1 zero?-n-1)
        (right (zero-not-add1 n-1))))))


(claim nat=?
  (Π ((n Nat)
      (j Nat))
    (Dec
     (= Nat n j))))

;(define nat=?
;  (λ (n j)
;    (ind-Nat n
;      (λ (k)
;        (Dec
;          (= Nat k j)))
;      (zero? j)
;      (λ (n-1 n-1=j?)
;        (ind-Either n-1=j?
;          (λ (l)
;            (Dec (= Nat (add1 n-1) j)))
;          (λ (n-1=j) ; (= Nat n-1 j)
;            (replace n-1=j
;              (λ (x)
;                (Dec (= Nat (add1 n-1) x)))
;              (right (add1-not-n n-1))))
;          (λ (n-1!=j) ; (-> (= Nat n-1 j) Absurd)
;            TODO))))))

(claim dec-add1-=
  (Π ((n-1 Nat)
      (j-1 Nat))
    (-> (Dec (= Nat n-1 j-1))
        (Dec (= Nat (add1 n-1) (add1 j-1))))))
(define dec-add1-=
  (λ (n-1 j-1 dec-n-1=j-1)
    (ind-Either dec-n-1=j-1
      (λ (x)
        (Dec (= Nat (add1 n-1) (add1 j-1))))
      (λ (n-1=j-1)
        (left
          (cong n-1=j-1 (+ 1))))
      (λ (n-1!=j-1)
        (right
          (λ (n=j)
            (n-1!=j-1 (sub1= n j n=j))))))))
      
(define nat=?
  (λ (n j)
    (ind-Nat n
      (λ (k)
        (Π ((i Nat))
          (Dec (= Nat k i))))
      zero?
      ; (Dec (= Nat (add1 n-1) i))
      (λ (n-1 nat=?-n-1 i)
        (ind-Nat i
          (λ (k)
            (Dec (= Nat (add1 n-1) k)))
          (add1-not-zero n-1)
          (λ (i-1 nat=?-i-1)
            (dec-add1= n-1 j-1 (nat=?-n-1 i-1))))))))
            
        
