#lang pie

(claim +
  (-> Nat Nat
      Nat))
(define +
  (λ (m n)
    (iter-Nat m
      n
      (λ (+-m-1)
        (add1 +-m-1)))))

(claim incr
  (-> Nat Nat))
(define incr
  (λ (n)
    (iter-Nat n
      1
      (+ 1))))

;; incr=add1, using `replace`
(claim mot-incr=add1
  (-> Nat U))
(define mot-incr=add1
  (λ (k)
    (= Nat (incr k) (add1 k))))

(claim base-incr=add1
  (mot-incr=add1 0))
(define base-incr=add1
  (same (add1 0)))

(claim mot-step-incr=add1
  (-> Nat Nat U))
(define mot-step-incr=add1
  (λ (n-1 k)
    (= Nat (add1 (incr n-1)) (add1 k))))

(claim step-incr=add1
  (∏ ((n-1 Nat))
    (-> (= Nat (incr n-1) (add1 n-1))
        (= Nat (add1 (incr n-1)) (add1 (add1 n-1))))))
(define step-incr=add1
  (λ (n-1 incr=add1-n-1)
    (replace
      incr=add1-n-1
      (mot-step-incr=add1 n-1)
      (same (add1 (incr n-1))))))

(claim incr=add1
  (∏ ((n Nat))
    (= Nat (incr n) (add1 n))))
(define incr=add1
  (λ (n)
    (ind-Nat n
      mot-incr=add1
      base-incr=add1
      step-incr=add1)))


(claim double
  (-> Nat Nat))
(define double
  (λ (n)
    (iter-Nat n
      0
      (+ 2))))

(claim twice
  (-> Nat Nat))
(define twice
  (λ (n)
    (+ n n)))

;; (double zero) = zero = (twice zero)
;;
;; (double (add1 n-1)) =
;; (iter-Nat (add1 n-1) 0 (+ 2)) =
;; (add1 (add1 (double n-1)))
;;
;; (twice (add1 n-1)) =
;; (+ (add1 n-1) (add1 n-1)) =
;; (add1 (+ n-1 (add1 n-1)))


;; add1+=+add1
(claim mot-add1+=+add1
  (-> Nat Nat U))
(define mot-add1+=+add1
  (λ (j k)
    (= Nat (add1 (+ k j)) (+ k (add1 j)))))

(claim mot-step-add1+=+add1
  (-> Nat Nat Nat
      U))
(define mot-step-add1+=+add1
  (λ (j n-1 k)
    (= Nat (add1 (add1 (+ n-1 j))) (add1 k))))

(claim step-add1+=+add1
  (∏ ((j Nat)
      (n-1 Nat))
    (-> (= Nat (add1 (+ n-1 j)) (+ n-1 (add1 j)))
        ;; (= Nat (add1 (+ (add1 n-1) j)) (+ (add1 n-1) (add1 j))) =>
        (= Nat (add1 (add1 (+ n-1 j))) (add1 (+ n-1 (add1 j)))))))
(define step-add1+=+add1
  (λ (j n-1)
    (λ (add1+=+add1-n-1)
      (replace
        add1+=+add1-n-1
        (mot-step-add1+=+add1 j n-1)
        (same (add1 (add1 (+ n-1 j))))))))

(claim add1+=+add1
  (∏ ((n Nat)
      (j Nat))
    (= Nat (add1 (+ n j)) (+ n (add1 j)))))
(define add1+=+add1
  (λ (n j)
    (ind-Nat n
      (mot-add1+=+add1 j)
      (same (add1 j))
      (step-add1+=+add1 j))))


;; twice=double
(claim mot-twice=double
  (-> Nat U))
(define mot-twice=double
  (λ (k)
    (= Nat (twice k) (double k))))

(claim step-twice=double
  (∏ ((n-1 Nat))
    (-> (= Nat (twice n-1) (double n-1))
        ;; (= Nat (twice (add1 n-1)) (double (add1 n-1))) =>
        (= Nat (add1 (+ n-1 (add1 n-1))) (add1 (add1 (double n-1)))))))
(define step-twice=double
  (λ (n-1)
    (λ (twice=double-n-1)
      (cong twice=double-n-1 (+ 2)))))

(claim twice=double
  (∏ ((n Nat))
    (= Nat (twice n) (double n))))
(define twice=double
  (λ (n)
    (ind-Nat n
      mot-twice=double
      (same 0)
      step-twice=double)))