#lang pie

(claim +
  (-> Nat Nat
      Nat))
(define +
  (λ (m n)
    (iter-Nat m
      n
      (λ (+-m-1)
        (add1 +-m-1)))))

(claim double
  (-> Nat Nat))
(define double
  (λ (n)
    (iter-Nat n
      0
      (+ 2))))


(claim Even
  (-> Nat U))
(define Even
  (λ (n)
    (Σ ((half Nat))
      (= Nat n (double half)))))

(claim zero-is-even
  (Even 0))
(define zero-is-even
  (cons 0 (same 0)))

(claim ten-is-even
  (Even 10))
(define ten-is-even
  (cons 5 (same 10)))


(claim +two-even
  (Π ((n Nat))
    (-> (Even n)
        (Even (+ 2 n)))))
(define +two-even
  (λ (n)
    (λ (even-n)
      (cons (add1 (car even-n))
        (cong (cdr even-n) (+ 2))))))


(claim two-is-even
  (Even 2))
(define two-is-even
  (+two-even 0 zero-is-even))