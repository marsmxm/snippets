#lang pie

(claim Maybe
  (-> U U))
(define Maybe
  (λ (X)
    (Either X Trivial)))

(claim nothing
  (Π ((E U))
    (Maybe E)))
(define nothing
  (λ (E)
    (right sole)))

(claim just
  (Π ((E U))
    (-> E
        (Maybe E))))
(define just
  (λ (E e)
    (left e)))

(claim maybe-head
  (Π ((E U))
    (-> (List E)
        (Maybe E))))
(define maybe-head
  (λ (E es)
    (rec-List es
      (nothing E)
      (λ (x xs ignore)
        (just E x)))))

(claim maybe-tail
  (Π ((E U))
    (-> (List E)
        (Maybe (List E)))))
(define maybe-tail
  (λ (E es)
    (rec-List es
      (nothing (List E))
      (λ (hd tl tail-tl)
        (just (List E) tl)))))

(claim list-ref
  (Π ((E U))
    (-> Nat (List E)
        (Maybe E))))
(define list-ref
  (λ (E n)
    (rec-Nat n
      (maybe-head E)
      (λ (n-1 lr-n-1)
        (λ (es)
          (ind-Either (maybe-tail E es)
            (λ (mt) (Maybe E))
            (λ (tl)
              (lr-n-1 tl))
            (λ (empty)
              (nothing E))))))))


(claim sandwich
  (-> Atom Atom))
(define sandwich
  (λ (which)
    'delicous))

(claim menu
  (Vec Atom 4))
(define menu
  (vec:: 'ratatouille
    (vec:: 'kartoffelmad
      (vec:: (sandwich 'hero)
        (vec:: 'prinsesstarta vecnil)))))


(claim Fin
  (-> Nat U))
(define Fin
  (λ (n)
    (iter-Nat n
      Absurd
      Maybe)))
