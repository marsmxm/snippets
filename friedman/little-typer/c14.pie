#lang pie

(claim Maybe
  (-> U U))
(define Maybe
  (λ (X)
    (Either X Trivial)))

(claim nothing
  (Π ((E U))
    (Maybe E)))
(define nothing
  (λ (E)
    (right sole)))

(claim just
  (Π ((E U))
    (-> E
        (Maybe E))))
(define just
  (λ (E e)
    (left e)))

(claim maybe-head
  (Π ((E U))
    (-> (List E)
        (Maybe E))))
(define maybe-head
  (λ (E es)
    (rec-List es
      (nothing E)
      (λ (x xs ignore)
        (just E x)))))

(claim maybe-tail
  (Π ((E U))
    (-> (List E)
        (Maybe (List E)))))
(define maybe-tail
  (λ (E es)
    (rec-List es
      (nothing (List E))
      (λ (hd tl tail-tl)
        (just (List E) tl)))))

(claim list-ref
  (Π ((E U))
    (-> Nat (List E)
        (Maybe E))))
(define list-ref
  (λ (E n)
    (rec-Nat n
      (maybe-head E)
      (λ (n-1 lr-n-1)
        (λ (es)
          (ind-Either (maybe-tail E es)
            (λ (mt) (Maybe E))
            (λ (tl)
              (lr-n-1 tl))
            (λ (empty)
              (nothing E))))))))
        

(claim sandwich
  (-> Atom Atom))
(define sandwich
  (λ (which)
    'delicous))

(claim menu
  (Vec Atom 4))
(define menu
  (vec:: 'ratatouille
    (vec:: 'kartoffelmad
      (vec:: (sandwich 'hero)
        (vec:: 'prinsesstarta vecnil)))))

(claim similarly-absurd
  (-> Absurd Absurd))
(define similarly-absurd
  (λ (x)
    x))

(claim Fin
  (-> Nat U))
(define Fin
  (λ (n)
    (iter-Nat n
      Absurd
      Maybe)))

(claim fzero
  (Π ((n Nat))
    ;; (Fin (add1 n)) =>
    (Maybe (Fin n))))
(define fzero
  (λ (n)
    (nothing (Fin n))))

(claim fadd1
  (Π ((n Nat))
    (-> (Fin n)
        (Fin (add1 n)))))
(define fadd1
  (λ (n)
    (λ (i-1)
      (just (Fin n) i-1))))

;; vec-ref
(claim vec-ref
  (Π ((E U)
      (l Nat))
    (-> (Fin l) (Vec E l)
        E)))

(claim base-vec-ref
  (Π ((E U))
    (-> (Fin zero) (Vec E zero)
        E)))
(define base-vec-ref
  (λ (E)
    (λ (no-value-ever es)
      (ind-Absurd no-value-ever
        E))))

(claim step-vec-ref
  (Π ((E U)
      (l-1 Nat))
    (-> (-> (Fin l-1) (Vec E l-1)
            E)
        (-> (Fin (add1 l-1)) (Vec E (add1 l-1))
            E))))
(define step-vec-ref
  (λ (E l-1)
    (λ (vec-ref-l-1)
      (λ (i es)
        (ind-Either i
          (λ (i) E)
          (λ (i-1)
            (vec-ref-l-1 i-1 (tail es)))
          (λ (triv)
            (head es)))))))

(define vec-ref
  (λ (E l)
    (ind-Nat l
      (λ (k)
        (-> (Fin k) (Vec E k)
            E))
      (base-vec-ref E)
      (step-vec-ref E))))

menu
(vec-ref Atom 4 (fzero 3) menu) ;; first
(vec-ref Atom 4 (fadd1 3 (fzero 2)) menu) ;; second
(vec-ref Atom 4 (fadd1 3 (fadd1 2 (fzero 1))) menu) ;; third
(vec-ref Atom 4 (fadd1 3 (fadd1 2 (fadd1 1 (fzero 0)))) menu) ;; fourth

(claim vec-index
  (Π ((n Nat))
    (-> Nat
        (Fin (add1 n)))))

(define vec-index
  (λ (n i)
    TODO))