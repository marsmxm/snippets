Hello - from /Users/mxm/.vscode/extensions/jaredly.reason-vscode-1.5.2/bin.native
Previous log location: /var/folders/8v/2p2vdhd14j1ds_rqjvxp92pr0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","format_width":"80","per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mxm/Learning/snippets/friedman/little-mler/ocaml/10-building-on-blocks.ml","languageId":"ocaml","version":1,"text":"module type N =\n  sig\n    type number\n    exception Too_small\n    val is_zero : number -> bool\n    val succ : number -> number\n    val pred : number -> number\n  end\n\nmodule NumberAsNum =\n  functor () ->\n    (struct\n      type number =\n        | Zero\n        | One_more_than of number\n\n      exception Too_small\n\n      let is_zero n = (n = Zero)\n      let succ n = One_more_than n\n\n      let pred = function\n        | Zero -> raise Too_small\n        | One_more_than m -> m\n    end : N)\n\nmodule NumStruct = NumberAsNum()\n\nmodule NumberAsInt =\n  functor () ->\n    (struct\n      type number = int\n\n      exception Too_small\n\n      let is_zero n = (n = 0)\n      let succ n = n + 1\n\n      let pred = function\n        | m when m > 0 -> m - 1\n        | _ -> raise Too_small\n    end : N)\n\nmodule IntStruct = NumberAsInt()\n\n\nmodule type P =\n  sig\n    type number\n    val plus : number -> number -> number\n  end\n\nmodule PON =\n  functor (AN : N) ->\n    (struct\n      type number = AN.number\n\n      let rec plus m n =\n        if AN.is_zero m\n        then n\n        else AN.succ (plus (AN.pred m) n)\n    end : P)\n\nmodule IntArith = PON(IntStruct)\nmodule NumArith = PON(NumStruct)\n\n(* let _ = IntArith.plus 2 3 \nError: This expression has type int but an expression was expected of type IntArith.number *)\n\n;;\n\nmodule type N_C_R =\n  sig\n    include N\n    val conceal : int -> number\n    val reveal : number -> int\n  end\n\nmodule NumberAsNum =\n  functor () ->\n    (struct\n      type number =\n        | Zero\n        | One_more_than of number\n\n      exception Too_small\n\n      let is_zero n = (n = Zero)\n      let succ n = One_more_than n\n\n      let pred = function\n        | Zero -> raise Too_small\n        | One_more_than m -> m\n\n      let rec conceal i =\n        if i = 0\n        then Zero\n        else One_more_than (conceal (i - 1))\n      \n      let rec reveal = function\n          Zero -> 0\n        | One_more_than n -> (reveal n) + 1\n      \n    end : N_C_R)\n\nmodule NumStruct = NumberAsNum()\n\nmodule NumberAsInt =\n  functor () ->\n    (struct\n      type number = int\n\n      exception Too_small\n\n      let is_zero n = (n = 0)\n      let succ n = n + 1\n\n      let pred = function\n        | m when m > 0 -> m - 1\n        | _ -> raise Too_small\n      \n      let conceal i = i\n      let reveal n = n\n    end : N_C_R)\n\nmodule IntStruct = NumberAsInt()\n\nmodule IntArith = PON(IntStruct)\nmodule NumArith = PON(NumStruct)\n\nlet _ = NumStruct.reveal (NumStruct.succ (NumStruct.conceal 0))\n\n(* let _ = NumStruct.reveal (NumArith.plus (NumStruct.conceal 1) (NumStruct.conceal 2))\nError: This expression has type NumStruct.number but an expression was expected of type NumArith.number *)\n\n;;\n\n(* the other syntax for functor *)\nmodule PON (AN : N) : P with type number = AN.number =\n  struct\n    type number = AN.number\n\n    let rec plus m n =\n      if AN.is_zero m\n      then n\n      else AN.succ (plus (AN.pred m) n)\n  end\n\nmodule IntArith = PON(IntStruct)\nmodule NumArith = PON(NumStruct)\n\nlet _ = NumStruct.reveal (NumArith.plus (NumStruct.conceal 1) (NumStruct.conceal 2))\nlet _ = IntStruct.reveal (IntArith.plus (IntStruct.conceal 1) (IntStruct.conceal 2))\n\nmodule NumberAsInt2 () : N with type number = int =\n  struct\n    type number = int\n\n    exception Too_small\n\n    let is_zero n = (n = 0)\n    let succ n = n + 1\n\n    let pred = function\n      | m when m > 0 -> m - 1\n      | _ -> raise Too_small\n    \n    let conceal i = i\n    let reveal n = n\n  end\n\nmodule IntStruct2 = NumberAsInt2()\nmodule IntArith2 = PON(IntStruct2)\n\nlet _ = IntArith2.plus 2 3\n\ntype num =\n    Zero\n  | One_more_than of num\n\nmodule NumberAsNum2 () : N with type number = num =\n  struct\n    type number = num\n\n    exception Too_small\n\n    let is_zero n = (n = Zero)\n    let succ n = One_more_than n\n\n    let pred = function\n      | Zero -> raise Too_small\n      | One_more_than m -> m\n\n    let rec conceal i =\n      if i = 0\n      then Zero\n      else One_more_than (conceal (i - 1))\n    \n    let rec reveal = function\n        Zero -> 0\n      | One_more_than n -> (reveal n) + 1\n    \n  end\n\nmodule NumStruct2 = NumberAsNum2()\nmodule NumArith2 = PON(NumStruct2)\n\n\nmodule type S =\n  sig\n    type number1\n    type number2\n\n    val similar : number1 -> number2 -> bool\n  end\n\nmodule Same (N1 : N) (N2 : N) : S with\n    type number1 = N1.number and\n    type number2 = N2.number =\n  struct\n    type number1 = N1.number\n    type number2 = N2.number\n\n    let rec sim n m =\n      if N1.is_zero n\n      then N2.is_zero m\n      else sim (N1.pred n) (N2.pred m)\n\n    let similar n m =\n      try sim n m\n      with\n          N1.Too_small -> false\n        | N2.Too_small -> false\n  end\n\nmodule SimIntNum = Same (IntStruct2) (NumStruct2)\n\nlet _ = SimIntNum.similar 3 (One_more_than (One_more_than Zero))\n\nmodule type J =\n  sig\n    val new_plus : int -> int -> int\n  end\n\nmodule NP (N1 : N_C_R) \n          (P1 : P with type number = N1.number) : J =\n  struct\n    let new_plus x y =\n      N1.reveal (P1.plus (N1.conceal x) (N1.conceal y))\n  end\n\nmodule NPStruct = NP (NumStruct) (NumArith)\n\nmodule type T =\n  sig\n    type number\n    val times : number -> number -> number\n  end\n\nmodule TON (A_N : N) \n           (A_P : P with type number = A_N.number) \n           : (T with type number = A_N.number) = struct\n  type number = A_N.number\n\n  let rec times n1 n2 =\n    if A_N.is_zero n1\n    then n1\n    else A_P.plus n2 (times (A_N.pred n1) n2)\nend\n\n;;\n\nmodule type Ysig =\n  sig\n    val y : (('a -> 'a) -> ('a -> 'a)) -> ('a -> 'a)\n  end\n\nmodule Yfunc () : Ysig = struct\n  type 'a t = Into of ('a t -> 'a)\n\n  let rec y f =\n    h f (Into (h f))\n  and h f a =\n    f (g a)\n  and g (Into a) x =\n    a (Into a) x\nend\n\nmodule Ystruct = Yfunc ()\n\nlet mk_fact fact n =\n  if n = 0\n  then 1\n  else n * fact (n - 1)\n\n\nlet _ = Ystruct.y mk_fact 10\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mxm/Learning/snippets/friedman/little-mler/ocaml/10-building-on-blocks.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0238418579102ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mxm/Learning/snippets/friedman/little-mler/ocaml/10-building-on-blocks.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0228881835938ms
Sending response {"id": 2, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":3,"method":"shutdown","params":null}
Sending response {"id": 3, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"exit","params":null}
Got exit! Terminating loop
Finished
