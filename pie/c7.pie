#lang pie

(claim mot-peas
  (-> Nat U))
(define mot-peas
  (λ (k)
    (Vec Atom k)))

(claim step-peas
  (∏ ((l-1 Nat))
    (-> (mot-peas l-1)
        (mot-peas (add1 l-1)))))
(define step-peas
  (λ (l-1 peasl-1)
    (vec:: 'pea peasl-1)))

(claim peas
  (∏ ((how-many-peas Nat))
    (Vec Atom how-many-peas)))
;(define peas
;  (λ (l)
;    (ind-Nat l
;      mot-peas
;      vecnil
;      (λ (l-1)
;        (λ (peasl-1)
;          (vec:: 'pea peasl-1))))))
(define peas
  (λ (l)
    (ind-Nat l
      mot-peas
      vecnil
      step-peas)))


(claim also-rec-Nat
  (∏ ((X U))
    (-> Nat X (-> Nat X X)
        X)))
(define also-rec-Nat
  (λ (X)
    (λ (n base step)
      (ind-Nat n
        (λ (k) X)
        base
        step))))


(claim mot-last
  (-> U Nat U))
(define mot-last
  (λ (E)
    (λ (k)
      (-> (Vec E (add1 k))
          E))))

(claim base-last
  (∏ ((E U))
    (mot-last E zero)))
(define base-last
  (λ (E)
    (λ (es) (head es))))

(claim step-last
  (∏ ((E U)
      (l-1 Nat))
    (-> (mot-last E l-1)
        (mot-last E (add1 l-1)))))
(define step-last
  (λ (E)
    (λ (l-1 lastl-1)
      (λ (es)
        (lastl-1 (tail es))))))

(claim last
  (∏ ((E U)
      (l Nat))
    (-> (Vec E (add1 l))
        E)))
(define last
  (λ (E l)
    (ind-Nat l
      (mot-last E)
      (base-last E)
      (step-last E))))

(last Atom 2 (vec:: 'a (vec:: 'b (vec:: 'c vecnil))))


(claim mot-drop-last
  (-> U Nat U))
(define mot-drop-last
  (λ (E)
    (λ (k)
      (-> (Vec E (add1 k))
          (Vec E k)))))

(claim base-drop-last
  (∏ ((E U))
    (mot-drop-last E zero)))
(define base-drop-last
  (λ (E)
    (λ (es) vecnil)))

(claim step-drop-last
  (∏ ((E U)
      (l-1 Nat))
    (-> (mot-drop-last E l-1)
        (mot-drop-last E (add1 l-1)))))
(define step-drop-last
  (λ (E)
    (λ (l-1)
      (λ (drop-last-l-1)
        (λ (es)
          (vec::
            (head es)
            (drop-last-l-1 (tail es))))))))

(claim drop-last
  (∏ ((E U)
      (l Nat))
    (-> (Vec E (add1 l))
        (Vec E l))))
(define drop-last
  (λ (E l)
    (ind-Nat l
      (mot-drop-last E)
      (base-drop-last E)
      (step-drop-last E))))

(drop-last Atom 2 (vec:: 'a (vec:: 'b (vec:: 'c vecnil))))


;; usages of TODO
(claim peas1 TODO)

(claim peas2
  (∏ ((n Nat))
    TODO))

(claim peas3
  (∏ ((n Nat))
    (Vec Atom n)))
(define peas3 TODO)

(claim peas4
  (∏ ((n Nat)) (Vec Atom n)))
(define peas4
  (λ (n) TODO))

(claim peas5
  (∏ ((n Nat)) (Vec Atom n)))
(define peas5
  (λ (x)
    (ind-Nat x
      (λ (k) (Vec Atom k))
      TODO
      TODO)))

(claim peas6
  (∏ ((n Nat)) (Vec Atom n)))
(define peas6
  (λ (x)
    (ind-Nat x
      (λ (k) (Vec Atom k))
      vecnil
      (λ (n-1 peas-n-1)
        (vec:: TODO TODO)))))