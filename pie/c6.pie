#lang pie

(claim a-vec
  (Vec Atom 3))
(define a-vec
  (vec:: 'a
    (vec:: 'b
      (vec:: 'c vecnil))))

(claim first-of-one
  (∏ ((E U))
    (-> (Vec E 1) E)))
(define first-of-one
  (λ (E)
    (λ (es)
      (head es))))

(claim first-of-two
  (∏ ((E U))
    (-> (Vec E 2) E)))
(define first-of-two
  (λ (E)
    (λ (es)
      (head es))))

(claim first
  (∏ ((E U)
      (l Nat))
    (-> (Vec E (add1 l))
        E)))
(define first
  (λ (E l)
    (λ (es)
      (head es))))

(claim rest
  (∏ ((E U))
    (∏ ((l Nat))
       (∏ ((es (Vec E (add1 l))))
          (Vec E l)))))
(define rest
  (λ (E)
    (λ (l)
      (λ (es)
        (tail es)))))
